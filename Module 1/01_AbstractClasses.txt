Abstraction

- It allows users to interact with applications without needing to understand the underlying complexities.
- For Example, in a messaging app, users can send messages without knowing how the app works internally.

- An Abstract class in Java is a class that cannot be instantiated and is declared with abstract keyword. It can contain both abstract methods (without a body) and concrete methods (with a body).

- You can create an abstract class for buttons in a messaging app, which includes an abstract method called buttonPress.

- To create specific button functionalities (like send, like, and forward), you need to extend the abstract class and implement the abstract methods in the subclasses.

- The override annotation is used to indicate that a method in a subclass is overriding a method from its superclass.

/*
abstract class AbstractButtonClass{
    String caption;
    public abstract void buttonPress();

    public void setCaption(String caption){
        this.caption = caption;
    }

    public String getCaption(){
        return this.caption;
    }
}

interface ButtonPress {
    void buttonPress();
}

class SendButtonClass extends AbstractButtonClass{
    String sendTo;
    String message;
    @override
    public void buttonPress(){
        System.out.println("Sending " + this.message + " to " + this.sendTo);
    }
    public void setSendTo(String sendTo){
        this.sendTo = sendTo;
    }
    public void setMessage(String message){
        this.message = message;
    }
}

public class Main {
    public static void main(String[] args) {
        SendButtonClass sendButton = new SendButtonClass();
        sendButton.setCaption("Send");
        sendButton.setSendTo("a@b.com");
        sendButton.setMessage("Hello World");
        sendButton.buttonPress();
    }
}
*/

Ques. What is an Abstract Method?
1. An abstract method is a method without a body (i.e., no implementation).
2. It acts as a blueprint and must be overridden in the subclass.
3. Declared using the abstract keyword.
/*
abstract class Shape {
    public abstract void draw();
}
*/

Ques. What is an Abstract Class?
1. Helps define common structure/behavior across related classes.
2. Encourages code consistency and enforces contracts for subclasses.
3. Useful when multiple subclasses share the same method name but differ in implementation.

-- Examples from Real-World Hierarchies:
1. Animal Hierarchy
    Common abstract methods: eat(), move(), sound().
    Subclasses implement these in their own way:
        Fish.move() → "A fish swims"
        Horse.move() → "A horse gallops"

2. Shape Hierarchy
    Abstract methods: draw(), calculateArea()
    Subclasses like Rectangle, Circle, Triangle implement them with shape-specific logic.

3. Button (UI Component) Hierarchy
    Abstract methods: setText(), setIcon(), onClick()
    Subclasses like SimpleButton, RadioButton, ToggleButton override them:
        SimpleButton.onClick() → prints “Hello World”
        ToggleButton.onClick() → changes state when clicked

Ques. What are the benefits of Using Abstract Methods?
1. Promotes modular and scalable design.
2. Saves time by avoiding repetitive code.
3. Helps organize classes into logical hierarchies.
4. Makes future extension and maintenance easier.