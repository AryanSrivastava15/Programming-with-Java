Abstraction

- It allows users to interact with applications without needing to understand the underlying complexities.
- For Example, in a messaging app, users can send messages without knowing how the app works internally.

- An Abstract class in Java is a class that cannot be instantiated and is declared with abstract keyword. It can contain both abstract methods (without a body) and concrete methods (with a body).

- You can create an abstract class for buttons in a messaging app, which includes an abstract method called buttonPress.

- To create specific button functionalities (like send, like, and forward), you need to extend the abstract class and implement the abstract methods in the subclasses.

- The override annotation is used to indicate that a method in a subclass is overriding a method from its superclass.

/*
abstract class AbstractButtonClass{
    String caption;
    public abstract void buttonPress();

    public void setCaption(String caption){
        this.caption = caption;
    }

    public String getCaption(){
        return this.caption;
    }
}

interface ButtonPress {
    void buttonPress();
}

class SendButtonClass extends AbstractButtonClass{
    String sendTo;
    String message;
    @override
    public void buttonPress(){
        System.out.println("Sending " + this.message + " to " + this.sendTo);
    }
    public void setSendTo(String sendTo){
        this.sendTo = sendTo;
    }
    public void setMessage(String message){
        this.message = message;
    }
}

public class Main {
    public static void main(String[] args) {
        SendButtonClass sendButton = new SendButtonClass();
        sendButton.setCaption("Send");
        sendButton.setSendTo("a@b.com");
        sendButton.setMessage("Hello World");
        sendButton.buttonPress();
    }
}
*/

Ques. What is an Abstract Method?
1. An abstract method is a method without a body (i.e., no implementation).
2. It acts as a blueprint and must be overridden in the subclass.
3. Declared using the abstract keyword.
/*
abstract class Shape {
    public abstract void draw();
}
*/

Ques. What is an Abstract Class?
1. Helps define common structure/behavior across related classes.
2. Encourages code consistency and enforces contracts for subclasses.
3. Useful when multiple subclasses share the same method name but differ in implementation.

-- Examples from Real-World Hierarchies:
1. Animal Hierarchy
    Common abstract methods: eat(), move(), sound().
    Subclasses implement these in their own way:
        Fish.move() → "A fish swims"
        Horse.move() → "A horse gallops"

2. Shape Hierarchy
    Abstract methods: draw(), calculateArea()
    Subclasses like Rectangle, Circle, Triangle implement them with shape-specific logic.

3. Button (UI Component) Hierarchy
    Abstract methods: setText(), setIcon(), onClick()
    Subclasses like SimpleButton, RadioButton, ToggleButton override them:
        SimpleButton.onClick() → prints “Hello World”
        ToggleButton.onClick() → changes state when clicked

Ques. What are the benefits of Using Abstract Methods?
1. Promotes modular and scalable design.
2. Saves time by avoiding repetitive code.
3. Helps organize classes into logical hierarchies.
4. Makes future extension and maintenance easier.


METHOD SIGNATURE
-> A Java class contains attributes and methods. A method defines the functionality of a certain process. The method signature refers to the method's prototype. 
-> Example: 
    class Addition {
        public int add(int number1, int number2) {
            /* method body */
        }
    }

Access Modifiers
-> In Java, all method signatures must begin with one of the following keywords: public, private, or protected. These specify the scope in which a method can be called. These keywords are also known as visibility modes, implying the extent to which they are available to the environment outside the class.
-> In addition, the keywords static, final, and abstract may also appear in the method signature. For example, the abstract keyword must appear after the access modifier to declare a method as abstract.
-> In the above example, the method’s access modifier is public. This means it’s accessible from anywhere.

-> If the access level of a method is private, it can only be called from within the class.
-> A method with public access is accessible from anywhere, including within the class, outside the class, within the package, and outside the package.  
-> A protected method is accessible within and outside the package through the child class.
-> The access level of a default (not explicitly specified) modifier can only be accessed within the package.  

Return Type
-> The return type denotes the data type of the value returned by the method. 
-> The return type in the example above is int. This means that the method returns an integer value as its result. void indicates that a method doesn't return any value.

Method name
-> Any legal Java identifier except Java’s reserved words may be used to form the method's name. However, Java’s naming conventions must be followed. 
-> In the above example, the method's name is add() because it aims to add two integer values.

The parameter list
-> A method signature also requires a comma-delimited list of input parameters, preceded by their data types, enclosed by parentheses. If there are no parameters, you must use empty parentheses.
-> In the example above, the input parameters are number1 and number2, the integer values that must be added together.


SIGNATURE OF AN ABSTRACT CLASS
-> There no method body is within curly brackets after the parameter list in abstract class.
-> Example: public abstract int add(int number1, int number2);

-> An abstract method cannot be private:
    The abstract method is expected to be overridden in a concrete class, so it cannot be declared private. Ideally, it should be public, but you may protect it or keep it default to restrict package-level access.

-> An abstract method cannot be overloaded:
    An abstract class cannot have two methods, one with an abstract keyword and another with the same name but a different signature. In other words, the following code is not acceptable:
        abstract class Adder {
            abstract int add(int num1, int num2);
            double add(double num1, double num2, double num3) {
                return num1+num2+num3;
            }
        }
    
    Since abstract methods don’t have any implementation, they cannot be overloaded. You can't have multiple versions of an abstract method. But, they must be overridden by the subclass. An abstract class can’t overload an abstract method. However, the concrete class may overload the abstract method of its superclass if needed.
        abstract class Adder {
            abstract int add(int num1, int num2);
        }

        class Addition extends Adder {
            public int add(int a, int b) {
                return a + b;
            }

            double add(double num1, double num2, double num3) {
                return num1 + num2 + num3;
            }
        }

-> So, in summary, an abstract class with one or more abstract methods defines a contract to be fulfilled by its subclasses. Its subclasses must implement these methods by following the exact method signature as in the parent class.


DYNAMIC POLYMORPHISM
-> One of the important applications of Java’s abstract methods is that you can achieve dynamic polymorphism with it. Dynamic polymorphism is achieved by overriding an abstract method from a parent in its subclass.
-> Example of Dynamic polymorphism
    abstract class Shape {
        abstract void area();
    } // created a abstract class which we can override later

    class Rectangle extends Shape { 
        private int width, height;

        Rectangle(int width, int height) {  //Constructor created
            this.width = width;
            this.height = height;
        }

        @Override
        void area() {
            int areaOfRectangle = this.width * this.height;
            System.out.println("Area of rectangle: " + areaOfRectangle);
        }  //overridden the abstract method using dynamic polymorphism
    }

    class Circle extends Shape {
        private int radius;

        Circle(int radius) {
            this.radius = radius;
        }

        @Override
        void area() {
            double areaOfCircle = Math.PI * Math.pow(this.radius, 2);
            System.out.println("Area of Circle: " + areaOfCircle);
        }
    }

    public class Main {
        public static void main(String[] args) {
            Shape shape;
            shape = new Rectangle(10, 20);
            shape.area();
            
            shape = new Circle(5);
            shape.area();
        }
    }